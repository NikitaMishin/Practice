#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include<time.h>

/*
Sorting in 

*/
int comparer (char *mas1, char* mas2);  //return 1 when mas1<mas2
void swap(char **a,char **b);
void bubblesort(char **a, int size); // sorting massive of strings
void quicksort( char **s ,int size);
void  insertsort(char **m, int size);  //ok
void copyarray(char **a, int n,char **b);//from where
void merge(char **a,int fir, char **b ,int sec,char **c); //merge two massive in third
void mergesortRecursively(char ** a,char **b,int  n , int *whereis);
void mergesort(char ** a,int n);
int main(void)
{	
	FILE *fp;
	  int ch;
	if( (fp=fopen("input.txt","r"))==NULL)
	{
		 printf("He удается открыть файл.\n");
 		 exit(1);
	}
	else printf("FILE is open\n");
	int size; 
	fscanf(fp,"%d",&size); //ok
	int *quantity=(int*)malloc(sizeof(int)*size);// allocation memory for  massive of sizes of strings 
	int t = 0;
	int i = 0;
	ch = fgetc(fp);// '\n'-char
	char sol=EOF;
	while((ch=fgetc(fp))!=EOF)
	{	
		sol=ch;
		t++;	
		if ((ch=='\n'))
		{
			quantity[i++]= t;
			t = 0;
		}	
	}
	if (sol!='\n'){ quantity[i++] = t;}  
	printf("i=%d\n",i);
	int realsize= i;
	int pos = 0;
	char **strings =(char**)malloc(sizeof(char*)*(realsize+1));
	rewind(fp);
	fscanf(fp,"%d",&size); //ok
	ch = fgetc(fp);// '\n'-symbol char
	while(pos != realsize)
	{ int k;
		strings[pos] = (char*)malloc(sizeof(char)*(quantity[pos]));
		for(k=0;k!=quantity[pos]-1;++k)
		{
			strings[pos][k]=fgetc(fp);
	 	}
		ch = fgetc(fp);
		strings[pos][k]='\0';
		pos++;
	}
	fclose(fp);
	int choice;
	printf("Choose algorithm of sorting\n");
	printf("Bubblesort-1\nInsertsort-2\nQuicksort-3\nMergesort-4\n	Your choice is=");
	scanf("%d",&choice);
	switch(choice)
	{
		case 1:
			 bubblesort(strings,realsize);break;
		case 2:
			 insertsort(strings,realsize);break;
		case 3 :
			quicksort(strings,realsize-1);break;
		case 4 :
			mergesort(strings,realsize);break;
		default:
			printf("wrong\nthen will ge\n"); 
			mergesort(strings,realsize);
			break; //then will be merge sort
	}
	for (int h = 0 ;h != realsize;h++)
 	{ 
 		printf("%s\n", strings[h]);
 		free(strings[h]);
 	}
 	
 	free(strings);
	free(quantity);
	return 0;
}

void bubblesort(char **a, int  const size) // sorting massive of strings
{   
	//int flag;
	for(int i = 0; i != size; i++)
	 	{ 
	 		for(int j = 0 ; j != size-i-1; ++j) 
	 		 { 
	 		 	if( comparer(a[j],a[j+1] ) )
	 		  		{	
	 		  			swap(&a[j],&a[j+1]);		
	 		 		  }		
 			 }
	
		}
}

void quicksort( char **s ,int size)
{
 	srand(time(NULL));
	 int p = rand()%size;
	int l_pointer = 0;
	int r_pointer = size;
	while(l_pointer <= r_pointer)
	{
		while ( comparer( s[p], s[l_pointer] ) ) ++l_pointer; 
		while ( comparer( s[r_pointer],s[p] ) ) --r_pointer;
 		if (l_pointer<=r_pointer)
		{
		 char *t = s[l_pointer];
		 s[l_pointer] = s[r_pointer];
		 s[r_pointer--] = t;
		 l_pointer++;
		}	
	}
	if(r_pointer > 0) quicksort(s,r_pointer);
	if (l_pointer<size) quicksort(s+l_pointer,size-l_pointer);
}
void  insertsort(char **m, int size)  //ok  
{ for (int i = 1 ; i != size; ++i)     //            51242-->> 15242->> 12542
	{
		int j = i;
		while((j> 0) && comparer(m[j-1],m[j] ) ) 
		{
		swap(&m[j-1],&m[j]);
		j--;
		}
	}	
}

void merge(char **a,int fir, char **b ,int sec,char **c) //merge two massive in third
{ 
	int l = 0;
	int r = 0;
	int i = 0;
	while(l<fir&&r<sec)
	{
		if (comparer(a[l],b[r])) {c[i] = b[r++];	}
		else {c[i] =a[l++];}
		i++;
	}
	while(l<fir) c[i++] =a[l++];
	while(r<sec) c[i++] = b[r++];			
	
}
void mergesortRecursively(char ** a,char **b,int  n , int *whereis)
{
 *whereis = 0;// right now in massive a
	if (n<2) return;
	if (n == 2) if ( comparer(a[0],a[1] ) )
	{ 
		swap(&a[0],&a[1]);	
	}
	 int middle = n/2;
	 int res,res1;
	 mergesortRecursively(a, b,middle,&res);
	 mergesortRecursively(a+middle,b+middle,n-middle,&res1);
	 if (res!=res1)
	 {
	 	if (res ==0) {copyarray(b+middle,n-middle,a+middle);}
	 	else copyarray(a+middle,n-middle,b+middle);
	 }
	 if (res==0)  
	 {
	 	merge(a,middle,a+middle,n-middle,b);
	 	*whereis = 1;
	 }
	 else
	 {
	 	merge(b,middle,b+middle,n-middle,a);
	  *whereis=0;
	 }
}
void mergesort(char ** a,int n)
{
	if (n<=1) return;
	if (n==2) 
	{
		if (comparer(a[0],a[1]))
		{
		 swap(&a[0],&a[1]);
		}
		return;
	}
	int where_m = 0;//  0== in massive a
	char **b = (char**)malloc(sizeof(char*)*n);
	mergesortRecursively(a,b,n,&where_m);
	if (where_m!=0) copyarray(b,n,a); //(from,where)
	free(b);
}
void copyarray(char **a, int n,char **b)//from where
{
 for (int i = 0; i != n;i++ )//
  b[i] = a[i]; 	
}
void swap(char **a,char **b)
{
	char *t = *a;
  *a = *b;
  *b = t;
 }
 int comparer (char* mas1, char* mas2)  //return 1 when mas2<mas1
{	
	int i = 0;
	while((mas1[i] !='\0')&& (mas2[i]!='\0'))
	{
		if (mas1[i] > mas2[i]) { return 1;}
		else if(mas1[i]<mas2[i]) {return 0;}
		i++;	
	}
	if (mas1[i]=='\0')return 0;
	return 1;
}
